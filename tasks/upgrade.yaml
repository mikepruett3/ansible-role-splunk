---
# Upgrade tasks file for ansible-role-splunk

- name: "Test if upgrade boolean variable is set correctly"
  ansible.builtin.assert:
    that:
      - upgrade is defined
      - upgrade is boolean
    quiet: yes

- name: "Create software directory under root homedir, if it does not exist"
  ansible.builtin.file:
    path: "/root/software/splunk/"
    state: directory

- name: "Check if installer package already exist"
  ansible.builtin.stat:
    path: "/root/software/splunk/{{ package_name }}"
  register: package

- name: "Download installer package from local repository"
  ansible.builtin.get_url:
    url: "{{ software_url }}/{{ package_name }}"
    dest: "/root/software/splunk/"
    validate_certs: no
    mode: '0770'
  when:
    - not package.stat.exists | bool

- name: "Create a zip archive of $SPLUNK_HOME/etc/system/default"
  community.general.archive:
    path: "{{ splunk_home }}/etc/system/default/"
    dest: /tmp/splunk-default-config-backup.zip
    format: zip

- name: "Create a zip archive of $SPLUNK_HOME/etc/system/local"
  community.general.archive:
    path: "{{ splunk_home }}/etc/system/local/"
    dest: /tmp/splunk-local-config-backup.zip
    format: zip

- name: "Stop the Splunk Universal Forwarder Service"
  ansible.builtin.systemd:
    name: "{{ splunk_service }}"
    state: stopped

- name: "Install package (RHEL - yum)"
  ansible.builtin.yum:
    name: "/root/software/splunk/{{ package_name }}"
    state: present
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_facts['distribution_major_version'] <= '7'

- name: "Install package (RHEL - dnf)"
  ansible.builtin.dnf:
    name: "/root/software/splunk/{{ package_name }}"
    state: present
    disable_gpg_check: yes
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_facts['distribution_major_version'] >= '8'

- name: "Install package (Debian)"
  ansible.builtin.apt:
    deb: "/root/software/splunk/{{ package_name }}"
    state: present
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: "Upgrade the Splunk Universal Forwarder Service"
  ansible.builtin.shell:
    cmd: ./splunk start --accept-license --answer-yes --no-prompt
    chdir: "{{ splunk_home }}/bin"

- name: "Wait 10 seconds"
  ansible.builtin.wait_for:
    timeout: 10
  delegate_to: localhost

- name: "Restart the Splunk Universal Forwarder Service"
  ansible.builtin.systemd:
    name: "{{ splunk_service }}"
    state: restarted
    daemon_reload: true
